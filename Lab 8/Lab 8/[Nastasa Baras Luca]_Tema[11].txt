//TEMA:

//Aici am o funcie putere care imi calculeaza a^b modular(ca sa nu am nr foarte mari)~Mai rapid mergea si in logb cu ridicare in T. log + inmult matriici de tip Fibb;

Pow (a,b,M)
{
    while(b>0)
    {
        a=a*a%M;
        b--;
    }
    return a%M;
}
//Aici verificam anagramele folosind un vector de frecventa care se reseteaza pt fiecare pereche de cuv (Complexitatea af fi 26*P.size()~P.size())
VerifAnagrame(s,t,poz1,poz2)
{
     v[26] = {0};
    for(i=0; i<poz1; i++)
        v[s[i]-"a"]++;
    for(i=0; i<poz2; i++)
        v[t[i]-"a"]--;
     Ok = 1;
    for(i=0;i<26;++i)
        if(v[i])
            Ok = 0;
     return Ok;
}
//Aici incepem sa ne bazam pe hash urile noastre ; dupa formula facuta in seminar si incepem sa verificam pt cate P caract daca val has-ului e aceeasi si dupa vor trb ca cele 2 el sa fie anagrame pt a vf coliz.
//Deci avem un O(P.size()*log(P.size())+(S.size-P.size())*P.size()~S.size()P.size():pt P =S.size()/k si S.size=n => O(n^2));
Anagrame(S, P, M) 
{
    B=5;
    val=false;
    hP = 0;
    hS = 0;
    n=P.size();
    a = Pow(B,n-1,M);
    for(i = 0; i < P.size(); i++) 
    {
        hP = ((P[i]-"a")*a)%M;
        hS += Pow(B,(S[i] - "a"),M)%M;
    }
    if( hP == hS && VerifAnagrame(S+i-P.size(),S,P.size(),P.size()))
        {
            print(i);
            val=true;
        }
    else
        for(i = P.size(); i <= S.size() - 1; i++) 
        {
            hS = (hS - Pow(B , (S[i - P.size()]),M) + Pow(B , S[i],M))%M;
            if(hP == hS && VerifAnagrame(S+i-P.size(),S,P.size(),P.size())) 
            { 
                print(i);
                val=true;
            }
        }
        return val;
}
M=13451;
S="cat";
P="tacatccatgtictacgrs";
Anagrame(S,P,M);



// BONUS:

/*De construit functii hash pentru cautarea tuturor anagramelor sirului p in sirul s.
Pentru fiecare functie hash sa faceti urmatoare statistica: numar coliziuni totale si numar coliziuni care au condus la o potrivire (anagrama)
Alfabetul poate fi relativ mic (3-5-7 caractere)
testati pe un sir s mare (10^3 - 10^5) caractere
si p mic (10~50 caractere)
*/
//Construim vect de nr prime;

Vect()
{
  for(i=2;i<=101;i++)
   {
       j=1;
     while(j<101)
      {
          v[j]=1;
          j=j*i;
      }
    }
    k=1;
    for(i=1;i<=101;i++)
      if(v[i]==0)
        Vec[k++]=i;
}
//Hash1
//Prima functie se bazeaza pe generarea unor numere prime in ordine {2,3,5,7,..prim(LungAlfabet)} a-prima literea ~ 2; b~ 3 ... O(26) ~ c ;o fac cu ciur dar are pb la memorie
//M va fi Cmmmc al nr-lor din sir + 1 ~ clar M va fi prim cu oricare el^k
//Si cuvantul de test(care are lung = lung(Pattern) si este din Sirul S) va fi introdus in Hash dupa formula Sum(V[P[i]]^i)%M;
//Analiza coliziuni(cand 2 el dau aceeasi suma dar nu-s anagrame) : Ele se intampla dar destul de rar cand avem aceeasi valoare de hash si calea de rezolvare ar fi Verificarea daca cele 2 bucati sunt Anagrame .
//Ca eficienta ar da cu tot cu verif in cel ai nefav caz O(n^2). 

//Pt inceput
Hash1(Pattern,Vect)
{
    hash=0;
 for(i=0;i<Pattern.size();i++)
   hash=hash+pow(Vect[Pattern[i]-"a"],i);
 return hash;
}

//Hash2
//Aici ma folosesc ca mai sus de nr prime dintr-un vector in care fiecare lit in ordine ii corespunde unui nr. prim ; Voi vedea pt fieacare mic grup de Pattern uri de cate ori apare Pattern[i] in sir;
// Pattern[i] apare de X ori si vom calcula Vec[Pattern[i]]^X; Hash2=Hash2*(Pattern[i]-"a")^X ~ Ne bazam aici pe factorizare
//Aici nu vom avea coliziuni in schimb avem calcule destul de mari si ne va cere ceva spatiu.
//Complexity Time: O(n*c)~O(n) ; c-nr el in alfabet care i ct;

Hash2(Pattern,Vect)
{
  hash=1;
  for(i=0;i<Pattern.size();i++)
    X[Pattern[i]-"a"]++;
 
  for(i=0;i<Pattern.size();i++)
    hash=hash*pow(Pattern[i],X[Pattern[i]-"a"]);
  return hash;
}

//Acum pt a rezolva problema cu numere mari vom face un nou hash in care retinem pt fiecare astfel de numar restul si catul (accesez cu keya = catul) campul = restul.
//Dim hash-ului va fi cel mai mare numar reprez pe intregi;
HashNumar(int numar,Dim)
{
  key=numar / Dim
  nr=1;
  v[key][nr++]=numar % Dim;
}
Iar cum avem numerele noastre salvate in aceasta tabela de dispersie.


//Insa pe alg devine costisitor sa calculam de cate ori apare fiecare carat pt fiecare p elemente consec. So la inceput fac functia care imi face acest vectr de poz.
//Dupa cand ma deplasez , la apartii scad de cate ori apare primul element si voi adauga urmatorul caracter la apartitii (clar pt aceste 2 el voi avea hash-S[0]^X +S[i]*(x+1)) ; X[S[0]]--;aplicat la parcurgereea pe sir.
//Daca vreau sa nu ma mai complic inmultesc direct hash cu X[S[i]] si obtinem acelasi cod.

//Alta idee ar mai fi punerea nr-ului intr-un sir de caractere si la compararea celor 2 siruri  s-ar face in O(n)
//Analiza: ~Deci in cel mai nefavorabil caz Complexitatea se duce in O(n^2) pt numere mari(daca pun numarul in sir)
           ~ Daca fac hash la numar (in cazul unor cuvinte relativ mici) voi avea complexitate O(n)
           ~Aici nu avem coliziuni in care cele 2 siruri nu sunt anagrame dar poate deveni destul de costisitor.

Alta idee.
//Hash 3(Urmeaza)
//Ca idee pentru ceva mai optim ne vom folosi de folding pe un anumit cuvat si ne bazam pe rationamentul cu nr prime (daca acel cuv este lung ;atnci devine destul de nasol de gasit un hash eficient)
 //ar fi extrem de folositor pentru un numar mare (sa il compar dar pe secvente de alte numere ai mici eventual biti ~ cazul hash2)


//Observatii: Testing : 10^5 caract for S  and 50 for P 
                 for ~ Hash1 : number bad collisions :223(+23 wrong numbers);
                               number good collisions:200(all anagrams)

                     ~ Hash2 : number good collisions: 200 (all anagrams)       
                             : number bad collisions: 0