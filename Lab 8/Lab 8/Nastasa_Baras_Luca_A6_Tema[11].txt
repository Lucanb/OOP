
//Aici am o funcie putere care imi calculeaza a^b modular(ca sa nu am nr foarte mari)~Mai rapid mergea si in logb cu ridicare in T. log + inmult matriici de tip Fibb;

Pow (a,b,M)
{
    while(b>0)
    {
        a=a*a%M;
        b--;
    }
    return a%M;
}
//Aici verificam anagramele folosind un vector de frecventa care se reseteaza pt fiecare pereche de cuv (Complexitatea af fi 26*P.size()~P.size())
VerifAnagrame(s,t,poz1,poz2)
{
     v[26] = {0};
    for(i=0; i<poz1; i++)
        v[s[i]-"a"]++;
    for(i=0; i<poz2; i++)
        v[t[i]-"a"]--;
     Ok = 1;
    for(i=0;i<26;++i)
        if(v[i])
            Ok = 0;
     return Ok;
}
//Aici incepem sa ne bazam pe hash urile noastre ; dupa formula facuta in seminar si incepem sa verificam pt cate P caract daca val has-ului e aceeasi si dupa vor trb ca cele 2 el sa fie anagrame pt a vf coliz.
//Deci avem un O(P.size()*log(P.size())+(S.size-P.size())*P.size()~S.size()P.size():pt P =S.size()/k si S.size=n => O(n^2));
Anagrame(S, P, M) 
{
    B=5;
    val=false;
    hP = 0;
    hS = 0;
    n=P.size();
    a = Pow(B,n-1,M);
    for(i = 0; i < P.size(); i++) 
    {
        hP = ((P[i]-"a")*a)%M;
        hS += Pow(B,(S[i] - "a"),M)%M;
    }
    if( hP == hS && VerifAnagrame(S+i-P.size(),S,P.size(),P.size()))
        {
            print(i);
            val=true;
        }
    else
        for(i = P.size(); i <= S.size() - 1; i++) 
        {
            hS = (hS - Pow(B , (S[i - P.size()]),M) + Pow(B , S[i],M))%M;
            if(hP == hS && VerifAnagrame(S+i-P.size(),S,P.size(),P.size())) 
            { 
                print(i);
                val=true;
            }
        }
        return val;
}
M=13451;
S="cat";
P="tacatccatgtictacgrs";
Anagrame(S,P,M);